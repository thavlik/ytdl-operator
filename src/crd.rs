use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct S3OutputSpec {
    // S3 bucket name (required)
    pub bucket: String,

    // Kubernetes Secret resource name containing S3 credentials
    // as the `accesskeyid` and `secretaccesskey` fields.
    pub secret: String,

    // S3 endpoint (e.g. for DigitalOcean use https://nyc3.digitaloceanspaces.com)
    pub endpoint: Option<String>,
    
    // S3 region (e.g. us-east-1)
    pub region: Option<String>,

    // Optional S3 key prefix. This field is also templated
    // with the metadata json, so it can contain any of the
    // fields from the youtube-dl output template.
    pub prefix: Option<String>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct VideoStorageSpec {
    // Object key template. Refer to youtube-dl documentation:
    // https://github.com/ytdl-org/youtube-dl#output-template
    // The default value is "%(id)s.%(ext)s"
    pub template: Option<String>,
    
    // Amazon S3-compatible output. This is currently the only
    // supported output, but is still optional because others
    // could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct MongoStorageSpec {
    // Kubernetes Secret resource name containing MongoDB credentials.
    pub secret: String,

    // MongoDB collection name.
    pub collection: String,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct MetadataStorageSpec {
    // Mongo storage backend specification. Mongo is ideal
    // here because it is schemaless and can be used to
    // store metadata for any video platform.
    pub mongo: Option<MongoStorageSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct ThumbnailStorageSpec {
    // Image format (jpg, png, webp, bmp, gif, ico, pgm)
    // The thumbnail will be converted to conform to this format.
    // https://crates.io/crates/image-convert
    pub format: String,

    // Object key template. Refer to youtube-dl documentation:
    // https://github.com/ytdl-org/youtube-dl#output-template
    // The metadata json is used to interpolate the values.
    // If unspecified, the default is "%(id)s.%(ext)s" where
    // %(ext)s is the format specified in the `format` field.
    // Tip: when mixing multiple platforms into the same bucket,
    // use a prefix like "%(extractor)s/" to separate thumbnails
    // into directories by platform. This way you can avoid
    // conflicts with videos that share the same ID across
    // different platforms.
    pub template: Option<String>,

    // Resize width. If specified, the thumbnail will be resized
    // to this width. If height is also specified, the thumbnail
    // will be resized to fit within the specified dimensions.
    pub width: Option<u32>,

    // Resize height. If specified, the thumbnail will be resized
    // to this height. If width is also specified, the thumbnail
    // will be resized to fit within the specified dimensions.
    pub height: Option<u32>,

    // Amazon S3-compatible output. This is currently the only
    // supported output, but is still optional because others
    // could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct OutputSpec {
    // Audiovisual data output specification.
    // Configure this field to download audio, video,
    // or both to an S3 bucket.
    pub video: Option<VideoStorageSpec>,

    // Metadata output specification. All metadata
    // documents will be committed to the database
    // with the `id` field as the primary key.
    // If you are mixing platforms, note that you
    // may encounter conflicts with different videos
    // that share the same ID.
    pub metadata: Option<MetadataStorageSpec>,

    // Thumbnail output specification.
    // Note ote that the metadata committed to the
    // database will not contain any direct references
    // to the thumbnail, so you will need to write
    // your own logic to associate thumbnails with
    // video metadata.
    pub thumbnail: Option<ThumbnailStorageSpec>,
}

/// Struct corresponding to the Specification (`spec`) part of the `Download` resource, directly
/// reflects context of the `Downloads.ytdl.org.yaml` file to be found in this repository.
/// The `Download` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "ytdl.org",
    version = "v1",
    kind = "Download",
    plural = "Downloads",
    derive = "PartialEq",
    status = "DownloadStatus",
    namespaced
)]
pub struct DownloadSpec {
    // Input to youtube-dl. Can be a URL or YouTube video ID.
    pub query: String,

    // Extra arguments to pass to youtube-dl, e.g.
    // `--recode-video mp4`. Do not specify -o as the output
    // flag is used to stream the data to the output bucket.
    pub extra: Option<String>,

    // Interval to re-query metadata. This is used to
    // keep a channel or playlist synchronized after
    // the initial query.
    #[serde(rename = "queryInterval")]
    pub query_interval: Option<String>,

    // Output specification. Once the metadata is queried,
    // the output specification will be used to download
    // the videos, metadata, and/or thumbnails to the 
    // configured storage backend(s).
    pub output: OutputSpec,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct DownloadStatus {
    // general status description of the download
    pub phase: Option<String>,

    // timestamp of when the resource was last updated
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<String>,

    // Timestamp of last metadata query. Used to determine
    // if the metadata is "stale" and should be re-queried.
    #[serde(rename = "lastQueried")]
    pub last_queried: Option<String>,

    // Metadata jsonl from `youtube-dl -j`. This field is
    // populated before any downloads are initiated, and
    // is used to determine if multiple pods should be
    // used to download multiple videos.
    // If multiple videos are to be downloaded, the
    // metadata field of each child Download will be
    // pre-populated since it is already queried.
    pub metadata: Option<String>,

    // Total number of videos associated with the query.
    // Equivalent to the count of newlines in the metadata.
    #[serde(rename = "totalVideos")]
    pub total_videos: Option<u32>,

    // Number of completed video downloads, used to track
    // progress for long-running tasks.
    #[serde(rename = "downloadedVideos")]
    pub downloaded_videos: Option<u32>,
}

/// Struct corresponding to the Specification (`spec`) part of the `Video` resource, directly
/// reflects context of the `Videos.ytdl.org.yaml` file to be found in this repository.
/// The `Video` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "ytdl.org",
    version = "v1",
    kind = "Video",
    plural = "Videos",
    derive = "PartialEq",
    status = "VideoStatus",
    namespaced
)]
pub struct VideoSpec {
    // Metadata jsonl from `youtube-dl -j`. Populated by
    // the parent `Download` resource upon creation.
    // The actual input URL passed to youtube-dl is the
    // `webpage_url` field from this structure.
    pub metadata: String,

    // Extra arguments to pass to youtube-dl, e.g.
    // `--recode-video mp4`. Do not specify -o as the output
    // flag is used to stream the data to the output bucket.
    pub extra: Option<String>,

    // Output specification. Once the metadata is queried,
    // the output specification will be used to download
    // the videos, metadata, and/or thumbnails to the 
    // configured storage backend(s).
    pub output: OutputSpec,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct VideoStatus {
    // general status description of the download
    pub phase: Option<String>,

    // timestamp of when the resource was last updated
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<String>,
}
