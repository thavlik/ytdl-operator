use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::{fmt, str::FromStr};

use image_format::ImageFormat;
use image_filter::ImageFilter;

/// S3-compatiable storage backend configuration for audiovisual output.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct S3OutputSpec {
    /// S3 bucket name (required)
    pub bucket: String,

    /// Kubernetes Secret resource name containing S3 credentials
    /// as the `access_key_id` and `secret_access_key` fields.
    /// If no credentials are specified, the default creds are used.
    /// This is typical behavior on AWS, but will not be the case
    /// on other S3-compatible platforms.
    pub secret: Option<String>,

    /// Alternative S3 endpoint (e.g. `"https://nyc3.digitaloceanspaces.com"`)
    pub endpoint: Option<String>,

    /// S3 region (e.g. us-east-1)
    pub region: Option<String>,

    /// Object key template. Refer to youtube-dl documentation:
    /// <https://github.com/ytdl-org/youtube-dl#output-template>
    /// The default value is "%(id)s.%(ext)s"
    /// TODO: %(ext)s is not available when the templating is done.
    /// Figure out a better way to do this.
    pub key: Option<String>,
}

/// Configuration for video storage.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct VideoStorageSpec {
    /// Amazon S3-compatible output. This is currently the only
    /// supported output, but is still optional because others
    /// could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

/// Configuration for metadata storage.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct MetadataStorageSpec {
}

/// Configuration for the `ytdl-executor` image that ultimately downloads the audiovisual content.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct ExecutorOverridesSpec {
    /// Override for `ytdl-executor` Docker image.
    pub image: Option<String>,

    /// Extra arguments to pass to youtube-dl, e.g. `--recode-video mp4`.
    /// Do not specify `-o` as the output flag is used for streaming the
    /// data to the output bucket.
    pub extra: Option<Vec<String>>,
}

/// Configuration for thumbnail storage.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct ThumbnailStorageSpec {
    /// Image format (`jpg`, `png`, etc.) The thumbnail will be converted
    /// to conform to this format. If unspecified, the image is not
    /// converted. See the crate [`image-convert`](https://crates.io/crates/image-convert).
    pub format: Option<ImageFormat>,

    /// Resize width. If specified, the thumbnail will be resized
    /// to this width. If height is also specified, the thumbnail
    /// will be resized to fit within the specified dimensions,
    /// otherwise the aspect ratio is maintained.
    pub width: Option<u32>,

    /// Resize height. If specified, the thumbnail will be resized
    /// to this height. If width is also specified, the thumbnail
    /// will be resized to fit within the specified dimensions,
    /// otherwise the aspect ratio is maintained.
    pub height: Option<u32>,

    /// Image filter to use when resizing.
    pub filter: Option<ImageFilter>,

    /// Amazon S3-compatible output. This is currently the only
    /// supported output, but is still optional because others
    /// could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct OutputSpec {
    /// Audiovisual content output specification. Configure this field to
    /// download audio, video, or both to an S3 bucket.
    pub video: Option<VideoStorageSpec>,

    /// Metadata output specification. All metadata documents will be committed
    /// to the database with the `id` field as the primary key. If you are mixing
    /// platforms, note that you may encounter conflicts with different videos
    /// that share the same ID.
    pub metadata: Option<MetadataStorageSpec>,

    /// Thumbnail output specification. Note that the metadata committed to the
    /// database will not contain any direct references to the thumbnail, so you
    /// will need to write your own logic to associate thumbnails with the metadata.
    pub thumbnail: Option<ThumbnailStorageSpec>,
}

/// Struct corresponding to the Specification (`spec`) part of the `Download` resource. Directly
/// reflects context of the `crds/ytdl.beebs.dev_download_crd.yaml` file to be found in this repository.
/// The `Download` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Default, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "ytdl.beebs.dev",
    version = "v1",
    kind = "Download",
    plural = "downloads",
    derive = "PartialEq",
    status = "DownloadStatus",
    namespaced
)]
#[kube(derive = "Default")]
#[kube(
    printcolumn = "{\"jsonPath\": \".status.phase\", \"name\": \"PHASE\", \"type\": \"string\" }"
)]
#[kube(
    printcolumn = "{\"jsonPath\": \".status.lastUpdated\", \"name\": \"AGE\", \"type\": \"date\" }"
)]
pub struct DownloadSpec {
    /// Input to youtube-dl. Can be a URL, YouTube video ID, or anything else
    /// accepted as input by `youtube-dl`.
    pub query: String,

    /// If true, ignore errors in querying individual entities. This is usually
    /// recommended for playlists and channels because the query will continue
    /// even if some videos are not available.
    #[serde(rename = "ignoreErrors")]
    pub ignore_errors: Option<bool>,

    /// Interval to re-query metadata. This is used to keep a channel or playlist
    /// synchronized after the initial query.
    #[serde(rename = "queryInterval")]
    pub query_interval: Option<String>,

    /// Overrides to be inherited by child [`Executor`] resources.
    pub overrides: Option<ExecutorOverridesSpec>,

    /// Output specification. Used to cache metadata in a database and/or download
    /// audiovisual content to an S3 bucket.
    pub output: OutputSpec,
}

/// Status object for the [`Download`] resource.
#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct DownloadStatus {
    /// A short description of the [`Download`] resource's current state.
    pub phase: Option<DownloadPhase>,

    /// A human-readable message indicating details about why the
    /// [`Download`] is in this phase.
    pub message: Option<String>,

    /// Timestamp of when the [`DownloadStatus`] object was last updated.
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<String>,

    /// Timestamp of when the query pod started.
    #[serde(rename = "queryStartTime")]
    pub query_start_time: Option<String>,

    /// Timestamp of last metadata query completion. Used to determine
    /// if the metadata is "stale" and should be re-queried.
    #[serde(rename = "lastQueried")]
    pub last_queried: Option<String>,

    /// Total number of videos associated with the query. Equivalent to the
    /// count of newlines in the metadata.
    #[serde(rename = "totalVideos")]
    pub total_videos: Option<u32>,

    /// Number of completed video downloads, used to track progress for
    /// long-running tasks.
    #[serde(rename = "downloadedVideos")]
    pub downloaded_videos: Option<u32>,
}

/// A short description of the [`Download`] resource's current state.
#[derive(Deserialize, Serialize, Debug, Clone, Copy, PartialEq, Eq, Hash, JsonSchema)]
pub enum DownloadPhase {
    /// The [`Download`] resource first appeared to the controller.
    Pending,

    /// The controller is waiting on a [`Mask`](vpn_types::Mask) to proceed.
    Waiting,

    /// The metadata is being queried. [`Executor`] resources will be created
    /// for each video as the info is received. Each line of output corresponds
    /// with [`ExecutorSpec::metadata`].
    Querying,

    /// One or more [`Executor`] resources are downloading content. The query
    /// may also be in progress.
    Downloading,

    /// All content has been downloaded successfully.
    Succeeded,

    /// The query [`Pod`](k8s_openapi::api::core::v1::Pod) failed with an error.
    ErrQueryFailed,

    /// One or more downloads failed with error(s).
    ErrDownloadFailed,
}

impl FromStr for DownloadPhase {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Pending" => Ok(DownloadPhase::Pending),
            "Waiting" => Ok(DownloadPhase::Waiting),
            "Querying" => Ok(DownloadPhase::Querying),
            "Downloading" => Ok(DownloadPhase::Downloading),
            "Succeeded" => Ok(DownloadPhase::Succeeded),
            "ErrQueryFailed" => Ok(DownloadPhase::ErrQueryFailed),
            "ErrDownloadFailed" => Ok(DownloadPhase::ErrDownloadFailed),
            _ => Err(()),
        }
    }
}

impl fmt::Display for DownloadPhase {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            DownloadPhase::Pending => write!(f, "Pending"),
            DownloadPhase::Waiting => write!(f, "Waiting"),
            DownloadPhase::Querying => write!(f, "Querying"),
            DownloadPhase::Downloading => write!(f, "Downloading"),
            DownloadPhase::Succeeded => write!(f, "Succeeded"),
            DownloadPhase::ErrQueryFailed => write!(f, "ErrQueryFailed"),
            DownloadPhase::ErrDownloadFailed => write!(f, "ErrDownloadFailed"),
        }
    }
}