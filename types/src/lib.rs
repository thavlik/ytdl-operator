use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct S3OutputSpec {
    // S3 bucket name (required)
    pub bucket: String,

    // Kubernetes Secret resource name containing S3 credentials
    // as the `accesskeyid` and `secretaccesskey` fields.
    // If no credentials are specified, the default creds are used.
    // This is typical behavior on AWS, but will not be the case
    // on other S3-compatible platforms.
    pub secret: Option<String>,

    // S3 endpoint (e.g. for DigitalOcean use https://nyc3.digitaloceanspaces.com)
    pub endpoint: Option<String>,

    // S3 region (e.g. us-east-1)
    pub region: Option<String>,

    // Object key template. Refer to youtube-dl documentation:
    // https://github.com/ytdl-org/youtube-dl#output-template
    // The default value is "%(id)s.%(ext)s"
    pub key: Option<String>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct VideoStorageSpec {
    // Amazon S3-compatible output. This is currently the only
    // supported output, but is still optional because others
    // could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct MongoStorageSpec {
    // Kubernetes Secret resource name containing MongoDB credentials.
    pub secret: String,

    // MongoDB collection name.
    pub collection: String,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct MetadataStorageSpec {
    // Mongo storage backend specification. Mongo is ideal
    // here because it is schemaless and can be used to
    // store metadata for any video platform.
    pub mongo: Option<MongoStorageSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct ThumbnailStorageSpec {
    // Image format (jpg, png, webp, bmp, gif, ico, pgm)
    // The thumbnail will be converted to conform to this format.
    // If unspecified, the image is not converted.
    // https://crates.io/crates/image-convert
    pub format: Option<String>,

    // Resize width. If specified, the thumbnail will be resized
    // to this width. If height is also specified, the thumbnail
    // will be resized to fit within the specified dimensions.
    pub width: Option<u32>,

    // Resize height. If specified, the thumbnail will be resized
    // to this height. If width is also specified, the thumbnail
    // will be resized to fit within the specified dimensions.
    pub height: Option<u32>,

    // Image filter to use when resizing. Valid options are:
    //  - nearest
    //  - triangle
    //  - catmullrom
    //  - gaussian
    //  - lanczos3
    pub filter: Option<String>,

    // Amazon S3-compatible output. This is currently the only
    // supported output, but is still optional because others
    // could be supported in the future.
    pub s3: Option<S3OutputSpec>,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct OutputSpec {
    // Audiovisual data output specification.
    // Configure this field to download audio, video,
    // or both to an S3 bucket.
    pub video: Option<VideoStorageSpec>,

    // Metadata output specification. All metadata
    // documents will be committed to the database
    // with the `id` field as the primary key.
    // If you are mixing platforms, note that you
    // may encounter conflicts with different videos
    // that share the same ID.
    pub metadata: Option<MetadataStorageSpec>,

    // Thumbnail output specification.
    // Note ote that the metadata committed to the
    // database will not contain any direct references
    // to the thumbnail, so you will need to write
    // your own logic to associate thumbnails with
    // video metadata.
    pub thumbnail: Option<ThumbnailStorageSpec>,
}

/// Struct corresponding to the Specification (`spec`) part of the `Download` resource, directly
/// reflects context of the `crds/ytdl.beebs.dev_download_crd.yaml` file to be found in this repository.
/// The `Download` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Default, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "ytdl.beebs.dev",
    version = "v1",
    kind = "Download",
    plural = "downloads",
    derive = "PartialEq",
    status = "DownloadStatus",
    namespaced
)]
#[kube(derive = "Default")]
pub struct DownloadSpec {
    // Input to youtube-dl. Can be a URL or YouTube video ID.
    pub query: String,

    // If true, ignore errors in querying individual entities.
    // This is usually recommended for playlists and channels
    // because the query will continue even if some videos
    // are not available.
    #[serde(rename = "ignoreErrors")]
    pub ignore_errors: bool,

    // Override for ytdl-executor docker image.
    pub executor: Option<String>,

    // Extra arguments to pass to youtube-dl, e.g.
    // `--recode-video mp4`. Do not specify -o as the output
    // flag is used to stream the data to the output bucket.
    pub extra: Option<String>,

    // Interval to re-query metadata. This is used to
    // keep a channel or playlist synchronized after
    // the initial query.
    #[serde(rename = "queryInterval")]
    pub query_interval: Option<String>,

    // Output specification. Once the metadata is queried,
    // the output specification will be used to download
    // the videos, metadata, and/or thumbnails to the
    // configured storage backend(s).
    pub output: OutputSpec,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct DownloadStatus {
    // general status description of the download
    pub phase: Option<String>,

    // more detailed status description of the download
    pub message: Option<String>,

    // timestamp of when the resource was last updated
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<String>,

    // timestamp of when the query pod started
    #[serde(rename = "queryStartTime")]
    pub query_start_time: Option<String>,

    // Timestamp of last metadata query. Used to determine
    // if the metadata is "stale" and should be re-queried.
    #[serde(rename = "lastQueried")]
    pub last_queried: Option<String>,

    // Total number of videos associated with the query.
    // Equivalent to the count of newlines in the metadata.
    #[serde(rename = "totalVideos")]
    pub total_videos: Option<u32>,

    // Number of completed video downloads, used to track
    // progress for long-running tasks.
    #[serde(rename = "downloadedVideos")]
    pub downloaded_videos: Option<u32>,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum DownloadPhase {
    Pending,
    QueryStarting,
    Querying,
    ErrQueryFailed,
    DownloadStarting,
    Downloading,
    ErrDownloadFailed,
    Succeeded,
}

impl DownloadPhase {
    pub fn from_str(s: &str) -> Option<DownloadPhase> {
        match s {
            "Pending" => Some(DownloadPhase::Pending),
            "QueryStarting" => Some(DownloadPhase::QueryStarting),
            "Querying" => Some(DownloadPhase::Querying),
            "ErrQueryFailed" => Some(DownloadPhase::ErrQueryFailed),
            "DownloadStarting" => Some(DownloadPhase::DownloadStarting),
            "Downloading" => Some(DownloadPhase::Downloading),
            "ErrDownloadFailed" => Some(DownloadPhase::ErrDownloadFailed),
            "Succeeded" => Some(DownloadPhase::Succeeded),
            _ => None,
        }
    }

    pub fn to_str(&self) -> &str {
        match self {
            DownloadPhase::Pending => "Pending",
            DownloadPhase::QueryStarting => "QueryStarting",
            DownloadPhase::Querying => "Querying",
            DownloadPhase::ErrQueryFailed => "ErrQueryFailed",
            DownloadPhase::DownloadStarting => "DownloadStarting",
            DownloadPhase::Downloading => "Downloading",
            DownloadPhase::ErrDownloadFailed => "ErrDownloadFailed",
            DownloadPhase::Succeeded => "Succeeded",
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum ExecutorPhase {
    Pending,
    Starting,
    Downloading,
    Succeeded,
    Failed,
}

impl ExecutorPhase {
    pub fn from_str(s: &str) -> Option<ExecutorPhase> {
        match s {
            "Pending" => Some(ExecutorPhase::Pending),
            "Starting" => Some(ExecutorPhase::Starting),
            "Downloading" => Some(ExecutorPhase::Downloading),
            "Succeeded" => Some(ExecutorPhase::Succeeded),
            "Failed" => Some(ExecutorPhase::Failed),
            _ => None,
        }
    }

    pub fn to_str(&self) -> &str {
        match self {
            ExecutorPhase::Pending => "Pending",
            ExecutorPhase::Starting => "Starting",
            ExecutorPhase::Downloading => "Downloading",
            ExecutorPhase::Succeeded => "Succeeded",
            ExecutorPhase::Failed => "Failed",
        }
    }
}

/// Struct corresponding to the Specification (`spec`) part of the `Executor` resource, directly
/// reflects context of the `crds/ytdl.beebs.dev_executor_crd.yaml` file to be found in this repository.
/// The `Executor` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Default, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "ytdl.beebs.dev",
    version = "v1",
    kind = "Executor",
    plural = "executors",
    derive = "PartialEq",
    status = "ExecutorStatus",
    namespaced
)]
#[kube(derive = "Default")]
pub struct ExecutorSpec {
    // Metadata json from `youtube-dl -j`. Populated by
    // the parent `Download` resource upon creation.
    // youtube-dl accepts a `--load-info-json` argument
    // to load metadata from a file, so this field is
    // ultimately used to avoid re-querying metadata.
    pub metadata: String,

    // Override for ytdl-executor docker image.
    pub executor: Option<String>,

    // Extra arguments to pass to youtube-dl, e.g.
    // `--recode-video mp4`. Do not specify -o as the output
    // flag is used to stream the data to the output bucket.
    pub extra: Option<String>,

    // Output specification. Once the metadata is queried,
    // the output specification will be used to download
    // the videos, metadata, and/or thumbnails to the
    // configured storage backend(s).
    pub output: OutputSpec,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, JsonSchema, PartialEq)]
pub struct ExecutorStatus {
    // a simple identifier for the Executor's state
    pub phase: Option<String>,

    // general status description of the Video's state
    pub message: Option<String>,

    // timestamp of when the download pod was started
    #[serde(rename = "startTime")]
    pub start_time: Option<String>,

    // timestamp of when the resource was last updated
    #[serde(rename = "lastUpdated")]
    pub last_updated: Option<String>,
}
